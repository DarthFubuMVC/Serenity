<!--Title: By.jQuery-->

<markdown>
An additional `OpenQA.Selenium.By` selector that utilizes the jQuery library already loaded on the page to locate elements.

Usage
-----
It is a c# dynamic so you will need to explicitly cast the selector to `OpenQA.Selenium.By` otherwise you will see a `Microsoft.CSharp.RuntimeBinder.RuntimeBinderException` The call to `By.jQuery(".some-string")` is equivalent to the jQuery call `$(".some-string")`, and since it is a dynamic you are open to call any jQuery method available to you, see the [jQuery documenation](http://api.jquery.com) for valid methods you can call. It will use the jQuery that is on your page so be mindful of what version of jQuery you are using.

<Snippet name="simpleByJQuery" />

Why the new selector?
---------------------
The default `OpenQA.Seleniumn.By` selectors are great for simple element location. Things get complicated and brittle though when you are looking for an element based on another element in a different branch of the DOM tree. As an example using those default selectors you would need to:

  1. Select a broad grouping of elements
  2. Marshal them back to your .net process __(Slow!)__
  3. Filter the elements
  4. Find that element's parent
  5. Marshal it back to your .net process __(Slow!)__
  6. Find the child element(s) of interest
  7. Marshal them back to your .net process __(Slow!)__
  8. Do something with the element(s)

With `By.jQuery` the same workflow would be: _(notice how many times elements are marshaled back and forth)_

  1. Select a broad grouping of elements with jQuery
  2. Filter those elements by some condition
  3. Find the element's parent
  4. Find the child element(s) of interest
  7. Marshal them back to your .net process __(Slow!)__
  8. Do something with the element(s)

</markdown>
