<!--Title: By.jQuery-->

<markdown>
An additional `OpenQA.Selenium.By` selector that utilizes the jQuery library already loaded on the page to locate elements.

Usage
-----
The call to `By.jQuery(".some-string")` is converted to the jQuery call `$(".some-string")` when passed to `ISearchContext.FindElement()`. It is also a C# dynamic object which allows to call any jQuery method available, see the [jQuery documenation](http://api.jquery.com) for valid methods. It will use the jQuery that is on your page so be mindful of what version of jQuery you are using. It will lower case the first letter of any method you use so it appears more like C#, for example `By.jQuery(".marker").Parents(".parent")` would become `$(".marker").parents(".parent")` in JavaScript.

It is a C# dynamic so you will need to explicitly cast the selector to `OpenQA.Selenium.By` otherwise you will see a `Microsoft.CSharp.RuntimeBinder.RuntimeBinderException`. This is a limitation when using dynamic objects.

<Snippet name="simpleByJQuery" />

Why the new selector?
---------------------

The default `OpenQA.Seleniumn.By` selectors are great for simple element location. Things get complicated and brittle though when you are looking for an element based on another element in a different branch of the DOM tree. As an example using those default selectors you would need to:

1. Select a broad grouping of elements
2. Marshal them back to your .net process __(Slow!)__
3. Filter the elements
4. Find that element's parent
5. Marshal it back to your .net process __(Slow!)__
6. Find the child element(s) of interest
7. Marshal them back to your .net process __(Slow!)__
8. Do something with the element(s)

With `By.jQuery` the same workflow would be: _(notice how many times elements are marshaled back and forth)_

1. Select a broad grouping of elements with jQuery
2. Filter those elements by some condition
3. Find the element's parent
4. Find the child element(s) of interest
7. Marshal them back to your .net process __(Slow!)__
8. Do something with the element(s)

Configure jQuery retry
---------------------
The default behavior of `By.jQuery()` will retry the selector up to 3 times in 100ms increments if it does not initially find jQuery loaded on the page.  This is useful if you are using `require.js` to load jQuery; Serenity can sometimes attempt to run selectors before require has finished loading jQuery.  To configured these values, use `JQueryCheckCount` and `JQueryCheckInterval` on the `JavaScript` object.  To toggle this feature use `CheckForJQuery`.

<Snippet name="simpleConfigureByJQuery" />

The execution of `By.jQuery()` happens asynchronously.  Because of this, you may need to increase your script timeout using `SetScriptTimeout(TimeSpan.FromMilliseconds(1000))`.

<Snippet name="simpleConfigureScriptTimeout" />

Handling Errors
--------------------
If jQuery is not loaded on the page a javascript `ReferenceError` is captured.  This is re-thrown in C# as an `InvalidOperationException`.

</markdown>
